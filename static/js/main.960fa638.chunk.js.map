{"version":3,"sources":["logo.svg","CalcButton.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CalcButton","props","react_default","a","createElement","className","id","onClick","text","Calculator","src","logo","alt","onChange","handleChange","displayText","buttonComponents","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","display","buttonsData","buttons","bind","assertThisInitialized","handleClick","event","innerHTML","target","setState","prevState","math","temp","slice","length","split","pop","_this2","calcButtons","map","currentButton","src_CalcButton","name","key","src_Calculator","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,ysBCWzBC,MATf,SAAoBC,GAEhB,OACIC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAMC,GAAIL,EAAMK,GAAIC,QAASN,EAAMM,SAC3CN,EAAMO,OCWJC,MAff,SAAoBR,GAChB,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,KAAMN,UAAU,WAAWO,IAAI,SAC/CV,EAAAC,EAAAC,cAAA,6CAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUO,SAAYZ,EAAMa,cAAeb,EAAMc,aACzDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeJ,EAAMe,8BC8EjCC,cAhFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,IACTC,YAAaC,KAEfV,EAAKJ,aAAeI,EAAKJ,aAAae,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKa,YAAcb,EAAKa,YAAYF,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IAPPA,4EASDc,GAAO,IACXC,EAAaD,EAAME,OAAnBD,UACPZ,KAAKc,SAAS,SAAAC,GACZ,MAAO,CACPV,QAASU,EAAUV,QAAUO,yCAIrBD,GAAO,IACVC,EAAaD,EAAME,OAAnBD,UACP,GAAkB,OAAdA,EACFZ,KAAKc,SAAS,CACVT,QAAS,WAGV,GAAkB,MAAdO,EACPZ,KAAKc,SAAS,SAAAC,GACZ,MAAO,CACPV,QAASW,OAAUD,EAAUV,iBAI5B,GAAkB,MAAdO,EAAmB,CAC1B,IAAMK,EAAOjB,KAAKI,MAAMC,QAAQa,MAAM,EAAElB,KAAKI,MAAMC,QAAQc,QAE7C,MADAF,EAAKG,MAAM,IAAIC,MAE3BrB,KAAKc,SAAS,CACZT,QAASY,IAIXjB,KAAKc,SAAS,CACZT,QAASY,EAAOL,QAKM,MAAvBZ,KAAKI,MAAMC,QACZL,KAAKc,SAAS,CACZT,QAASO,IAIbZ,KAAKc,SAAS,SAAAC,GACZ,MAAO,CAACV,QAASU,EAAUV,QAAUO,sCAKlC,IAAAU,EAAAtB,KACDuB,EAAcvB,KAAKI,MAAME,YAAYkB,IAAI,SAAAC,GAAa,OAC1D5C,EAAAC,EAAAC,cAAC2C,EAAD,CACEzC,GAAMwC,EAAcE,KACpBC,IAAOH,EAAcE,KACrBxC,KAAQsC,EAActC,KACtBD,QAAWoC,EAAKZ,gBAGpB,OACE7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8C,EAAD,CACEvC,KAAQA,IACRK,iBAAoB4B,EACpB9B,aAAgBO,KAAKP,aACrBC,YAAeM,KAAKI,MAAMC,kBA1ElByB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.960fa638.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction CalcButton(props) {\r\n    \r\n    return (\r\n        <p className=\"Pod\" id={props.id} onClick={props.onClick}>\r\n            {props.text}\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default CalcButton","import React from 'react'\r\n\r\nfunction Calculator(props) {\r\n    return (\r\n    <div>\r\n        <header>\r\n            <img src={props.logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1>Steven's Javascript Calculator</h1>\r\n        </header>\r\n        <div className=\"App\">\r\n            <div id=\"display\" onChange = {props.handleChange}>{props.displayText}</div>\r\n            <div className=\"button-grid\">{props.buttonComponents}</div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Calculator","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {buttons} from './buttons.json'\nimport CalcButton from './CalcButton'\nimport Calculator from './Calculator'\nimport * as math from 'mathjs'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      display: \"0\",\n      buttonsData: buttons\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleChange(event) {\n    const {innerHTML} = event.target\n    this.setState(prevState => {\n      return {\n      display: prevState.display + innerHTML\n      }\n    })\n  }\n  handleClick(event) {\n    const {innerHTML} = event.target\n    if (innerHTML === \"AC\") {\n      this.setState({\n          display: \"0\"\n      })\n    }\n    else if (innerHTML === \"=\") {\n      this.setState(prevState => {\n        return {\n        display: math.eval(prevState.display)\n        }\n      })\n    }\n    else if (innerHTML === \".\") {\n      const temp = this.state.display.slice(0,this.state.display.length)\n      const temp2 = temp.split(\"\").pop()\n      if (temp2 === \".\"){\n        this.setState({\n          display: temp\n        })\n      }\n      else {\n        this.setState({\n          display: temp + innerHTML\n        })\n      }\n    }\n    else {\n      if(this.state.display === \"0\"){\n        this.setState({\n          display: innerHTML\n        })\n      }\n      else {\n      this.setState(prevState => {\n        return {display: prevState.display + innerHTML}\n      })\n    }\n    }\n  }\n  render() {\n    const calcButtons = this.state.buttonsData.map(currentButton => \n      <CalcButton \n        id = {currentButton.name}\n        key = {currentButton.name}\n        text = {currentButton.text}\n        onClick = {this.handleClick}\n      />\n      )\n    return (\n      <div>\n        <Calculator\n          logo = {logo}\n          buttonComponents = {calcButtons}\n          handleChange = {this.handleChange}\n          displayText = {this.state.display}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}