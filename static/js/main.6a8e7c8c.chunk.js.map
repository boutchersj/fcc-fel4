{"version":3,"sources":["App.js","logo.svg","CalcButton.js","Calculator.js","serviceWorker.js","index.js"],"names":["App","_this","Object","C_Users_boutc_fcc_fel4_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_boutc_fcc_fel4_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_boutc_fcc_fel4_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","display","buttonsData","buttons","handleChange","bind","C_Users_boutc_fcc_fel4_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","handleClick","event","innerHTML","target","setState","prevState","eval","_this2","calcButtons","map","currentButton","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_CalcButton__WEBPACK_IMPORTED_MODULE_10__","id","name","key","text","onClick","_Calculator__WEBPACK_IMPORTED_MODULE_11__","logo","buttonComponents","displayText","Component","module","exports","__webpack_require__","p","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","CalcButton","props","className","Calculator","src","alt","onChange","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iqDAOMA,yBACJ,SAAAA,MAAc,IAAAC,EAAA,OAAAC,OAAAC,0GAAA,EAAAD,CAAAE,KAAAJ,MACZC,EAAAC,OAAAG,qHAAA,EAAAH,CAAAE,KAAAF,OAAAI,0GAAA,EAAAJ,CAAAF,KAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,IACTC,YAAaC,8CAEfV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,iHAAA,EAAAZ,CAAAD,IACpBA,EAAKc,YAAcd,EAAKc,YAAYF,KAAjBX,OAAAY,iHAAA,EAAAZ,CAAAD,IAPPA,gSASDe,GAAO,IACXC,EAAaD,EAAME,OAAnBD,UACPb,KAAKe,SAAS,SAAAC,GACZ,MAAO,CACPX,QAASW,EAAUX,QAAUQ,qDAIrBD,OAAO,IACVC,UAAaD,MAAME,OAAnBD,UACW,OAAdA,UACFb,KAAKe,SAAS,CACVV,QAAS,KAGQ,MAAdQ,UACPb,KAAKe,SAAS,SAAAC,WACZ,MAAO,CACPX,QAASY,KAAKD,UAAUX,YAK1BL,KAAKe,SAAS,SAAAC,GACZ,MAAO,CACLX,QAASW,EAAUX,QAAUQ,8CAY5B,IAAAK,EAAAlB,KACDmB,EAAcnB,KAAKI,MAAME,YAAYc,IAAI,SAAAC,GAAa,OAC1DC,2CAAAC,EAAAC,cAACC,0CAAA,EAAD,CACEC,GAAML,EAAcM,KACpBC,IAAOP,EAAcM,KACrBE,KAAQR,EAAcQ,KACtBC,QAAWZ,EAAKP,gBAGpB,OACEW,2CAAAC,EAAAC,cAAA,WACEF,2CAAAC,EAAAC,cAACO,0CAAA,EAAD,CACEC,KAAQA,iDACRC,iBAAoBd,EACpBX,aAAgBR,KAAKQ,aACrB0B,YAAelC,KAAKI,MAAMC,oBA9DlB8B,8CAqEHvC,8CC5EfwC,EAAAC,QAAiBC,EAAAC,EAAuB,+dCAxC,IAAAC,EAAAF,EAAA,GAAAG,EAAAH,EAAAI,EAAAF,GAWeG,IATf,SAAoBC,GAEhB,OACIH,EAAAlB,EAAAC,cAAA,KAAGqB,UAAU,MAAMnB,GAAIkB,EAAMlB,GAAII,QAASc,EAAMd,SAC3Cc,EAAMf,qCCNnB,IAAAW,EAAAF,EAAA,GAAAG,EAAAH,EAAAI,EAAAF,GAiBeM,IAff,SAAoBF,GAChB,OACAH,EAAAlB,EAAAC,cAAA,WACIiB,EAAAlB,EAAAC,cAAA,cACIiB,EAAAlB,EAAAC,cAAA,OAAKuB,IAAKH,EAAMZ,KAAMa,UAAU,WAAWG,IAAI,SAC/CP,EAAAlB,EAAAC,cAAA,6CAEJiB,EAAAlB,EAAAC,cAAA,OAAKqB,UAAU,OACXJ,EAAAlB,EAAAC,cAAA,OAAKE,GAAG,UAAUuB,SAAYL,EAAMpC,cAAeoC,EAAMV,aACzDO,EAAAlB,EAAAC,cAAA,OAAKqB,UAAU,eAAeD,EAAMX,yLCC5BiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAlC,EAAAC,cAAC5B,EAAA,EAAD,MAAS8D,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a8e7c8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {buttons} from './buttons.json'\nimport CalcButton from './CalcButton'\nimport Calculator from './Calculator'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      display: \"0\",\n      buttonsData: buttons\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleChange(event) {\n    const {innerHTML} = event.target\n    this.setState(prevState => {\n      return {\n      display: prevState.display + innerHTML\n      }\n    })\n  }\n  handleClick(event) {\n    const {innerHTML} = event.target\n    if (innerHTML === \"AC\") {\n      this.setState({\n          display: \"\"\n      })\n    }\n    else if (innerHTML === \"=\") {\n      this.setState(prevState => {\n        return {\n        display: eval(prevState.display)\n        }\n      })\n    }\n    else if (innerHTML === \"-\" || \"+\" || \"-\" || \"*\" || \".\") {\n      this.setState(prevState => {\n        return {\n          display: prevState.display + innerHTML\n        }\n      })\n    }\n    else {\n    this.setState(prevState => {\n      return {\n      display: prevState.display + innerHTML\n      }\n    })\n  }\n  }\n  render() {\n    const calcButtons = this.state.buttonsData.map(currentButton => \n      <CalcButton \n        id = {currentButton.name}\n        key = {currentButton.name}\n        text = {currentButton.text}\n        onClick = {this.handleClick}\n      />\n      )\n    return (\n      <div>\n        <Calculator\n          logo = {logo}\n          buttonComponents = {calcButtons}\n          handleChange = {this.handleChange}\n          displayText = {this.state.display}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction CalcButton(props) {\r\n    \r\n    return (\r\n        <p className=\"Pod\" id={props.id} onClick={props.onClick}>\r\n            {props.text}\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default CalcButton","import React from 'react'\r\n\r\nfunction Calculator(props) {\r\n    return (\r\n    <div>\r\n        <header>\r\n            <img src={props.logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1>Steven's Javascript Calculator</h1>\r\n        </header>\r\n        <div className=\"App\">\r\n            <div id=\"display\" onChange = {props.handleChange}>{props.displayText}</div>\r\n            <div className=\"button-grid\">{props.buttonComponents}</div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Calculator","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}